use std::fs;

// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{SOL_ELF, SOL_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};

fn main() {
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // Load solana program
    let bytecode =
        fs::read("minimal-sol/target/deploy/minimal_sol.so").expect("Failed to read bytecode");

    let env = ExecutorEnv::builder()
        .write(&bytecode)
        .unwrap()
        .build()
        .unwrap();

    let prover = default_prover();

    println!("Generating proof of Solana program execution...");
    let prove_info = prover.prove(env, SOL_ELF).unwrap();

    println!("Proof generated successfully!");
    println!("  Total cycles: {}", prove_info.stats.total_cycles);
    println!("  User cycles: {}", prove_info.stats.user_cycles);
    let receipt = prove_info.receipt;
    let executed_successfully: bool = receipt.journal.decode().unwrap();
    if executed_successfully {
        println!("Solana program executed successfully!");
    } else {
        println!("Error - Solana program failed execution");
    }

    // Verify the receipt
    println!("\nVerifying proof...");
    receipt.verify(SOL_ID).unwrap();
    println!("Proof verified!");
}
